<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:zcml="http://namespaces.zope.org/zcml"
			xmlns:ext="http://nextthought.com/ntp/ext"
			i18n_domain="zope">

	<include package="zope.component" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" />
	<include package="zope.security" />
	<include package="zope.location" />
	<include package="zope.annotation" />

	<!-- Publishing -->
	<include package="nti.publishing" />

	<!-- for IComponentLookup(context) and queryNextUtility to work -->
	<include package="zope.site" />

	<!-- weak refs -->
	<!-- if we neglect to include the main configuration, our local
		 wref tests pass without the persistent override registration, when
		 in fact the will fail at runtime.
	-->
	<include package="nti.wref" />
	<adapter factory=".wref.ContentUnitWeakRef" />

	<!-- also override for persistent units, which we want to
		 be referenced by NTIID and looked up in the library. -->
	<adapter factory=".wref.ContentUnitWeakRef"
			 for=".interfaces.IPersistentContentUnit" />

	<!-- site libraries, when we're using the filesystem -->
	<adapter factory=".filesystem.GlobalFilesystemSiteLibraryFactory" />

	<adapter factory=".adapters.contentunit_to_site" />
	<adapter factory=".adapters.contentbundle_to_site" />
	<adapter factory=".adapters.enumeration_from_library" />
	<adapter factory=".adapters.trx_recorder_history_factory" />

	<adapter factory=".adapters.ContentPackageTransactionManager" />

	<adapter factory=".bundle._ContentPackageBundleLibrarySynchronizer" />

	<!-- annotations -->
	<!-- single argument -->
	<adapter factory=".annotation.annotations" />

	<!-- context argument -->
	<adapter factory=".annotation.annotations"
			 for=".interfaces.IContentUnit *" />

	<utility factory=".annotation.GlobalContentUnitAnnotationUtility"
			 provides=".interfaces.IContentUnitAnnotationUtility" />

	<!-- for dublincore annotations-->
	<include package="zope.dublincore" />

	<adapter factory=".dublincore.DisplayableContentZopeDublinCoreAdapter"
			 for=".interfaces.IContentPackage"
			 provides="zope.dublincore.interfaces.IWriteZopeDublinCore"/>

	<adapter factory=".dublincore.DisplayableContentZopeDublinCoreAdapter"
			 for=".interfaces.IContentPackageBundle"
			 provides="zope.dublincore.interfaces.IWriteZopeDublinCore"/>

	<adapter factory=".dublincore.DescriptivePropertiesZopeDublinCoreAdapter"
			 for=".interfaces.IContentUnit"
			 provides="zope.dublincore.interfaces.IWriteZopeDublinCore"/>

	<!-- Adapters -->
	<adapter factory=".boto_s3._KeyDelimitedHierarchyEntry" />
	<adapter factory=".filesystem._KeyDelimitedHierarchyEntry" />

	<adapter factory=".boto_s3._EclipseContentPackageFactory"
			 for=".interfaces.IS3Key"
			 provides=".interfaces.IEclipseContentPackageFactory"/>

	<adapter factory=".filesystem._EclipseContentPackageFactory"
			 for=".interfaces.IFilesystemKey"
			 provides=".interfaces.IEclipseContentPackageFactory"/>

	<adapter factory=".filesystem._EclipseContentPackageFactory"
			 for=".interfaces.IFilesystemBucket"
			 provides=".interfaces.IEclipseContentPackageFactory"/>

	<!-- Event listeners -->
	<subscriber handler=".subscribers.install_site_content_library"
				for="nti.site.interfaces.IHostPolicySiteManager
					 zope.site.interfaces.INewLocalSite" />

	<subscriber handler=".subscribers.on_site_created" />
	<subscriber handler=".subscribers.install_bundle_library" />
	<subscriber handler=".subscribers.uninstall_bundle_library" />
	<subscriber handler=".subscribers.sync_bundles_when_library_synched" />

	<!-- No need to try to index these objects -->
	<class class='.library.AbstractContentPackageLibrary'>
		<implements interface="zope.catalog.interfaces.INoAutoIndex" />
		<implements interface="zope.catalog.interfaces.INoAutoReindex" />
	</class>

	<!-- Externalization -->
	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />

	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.ISynchronizationParams
						 .interfaces.ISynchronizationResults
						 .interfaces.IContentPackageSyncResults
						 .interfaces.ILibrarySynchronizationResults"
		modules=".synchronize" />

	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.IEditableContentUnit"
		modules=".zodb" />

	<ext:registerMimeFactories module=".bundle" />

	<adapter factory=".externalization._ContentPackageExternal" />
	<adapter factory=".externalization._ContentPackageLibraryExternal" />
	<adapter factory=".externalization._EditableContentPackageExternal" />
	<adapter factory=".externalization._RenderableContentPackageExternal" />
	<adapter factory=".externalization._LegacyCourseConflatedContentPackageExternal" />

	<adapter factory=".externalization._ContentBundleIO" />
	<adapter factory=".externalization._PublishableContentBundleIO" />

	<adapter factory=".externalization._DisplayablePlatformPresentationResourcesIO" />

	<adapter factory=".externalization._FilesystemKeyHrefMapper" />
	<adapter factory=".externalization._FilesystemBucketHrefMapper" />
	<adapter factory=".externalization._FilesystemContentUnitHrefMapper" />

	<adapter factory=".externalization._S3KeyHrefMapper" />
	<adapter factory=".externalization._S3ContentUnitHrefMapper" />

	<adapter factory=".externalization._ContentPackageExporter"
			 for=".interfaces.IContentPackage"
			 name="exporter" />

	<adapter factory=".externalization._EditableContentPackageExporter"
			 for=".interfaces.IEditableContentPackage"
			 name="exporter" />

	<!-- Internalization -->
	<adapter factory=".internalization._EditableContentUnitUpdater"
			 for=".interfaces.IEditableContentUnit"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".internalization._EditableContentPackageUpdater"
			 for=".interfaces.IEditableContentPackage"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".internalization._RenderableContentUnitUpdater"
			 for=".interfaces.IRenderableContentUnit"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".internalization._RenderableContentPackageUpdater"
			 for=".interfaces.IRenderableContentPackage"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

    <adapter factory=".internalization._RenderableContentPackageUpdater"
             for=".interfaces.IRenderableContentPackage"
             provides="nti.externalization.interfaces.INamedExternalizedObjectFactoryFinder" />

	<!-- Presentation assets -->
	<include package=".indexed_data" />

	<!-- Validators -->
    <ext:registerAutoPackageIO
        root_interfaces=".interfaces.IContentValidationError"
        modules=".validators" />

	<!-- Validators -->
	<adapter factory=".vendorinfo.package_vendor_info_factory" />
	<adapter factory=".vendorinfo.ContentPackageBundleVendorInfo" />

</configure>
